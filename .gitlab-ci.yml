stages:
  - pylint_test
  - test
  - dev_test

test macOS:
  stage: test
  script:
      - tox
  tags:
    - gift-mac

pylintjob:
  stage: pylint_test
  script:

    # save current folder path just in case
    - export imagesplit_dir=$(pwd)

    # create a virtual env so that pylint can import
    - pyl_venv_name="imagesplit-test-pyl"
    - py3_bin=$(which python3)
    - virtualenv -p $py3_bin $pyl_venv_name
    - cd $pyl_venv_name/bin
    - pyl_venv_bin=$(pwd)

    # print Python version to CI output
    - $pyl_venv_bin/python --version

    # Install requirements
    - cd $imagesplit_dir
    - $pyl_venv_bin/pip install -r requirements-dev.txt

    # Run pylint
    - $pyl_venv_bin/pylint --rcfile=tests/pylintrc imagesplit
  tags:
    - gift-linux

testjob-linux:
  stage: dev_test
  script:
    # !!kill coverage in case of hanging processes
    - if pgrep coverage; then pkill -f coverage; fi

    # print system info
    - pwd

    # save current folder path just in case
    - export imagesplit_dir=$(pwd)

    #### python 3 tests ###################################
    - echo 'Running Python 3 tests'

    # create a virtual env for testing
    - py3_venv_name="imagesplit-test-py3"
    - py3_bin=$(which python3)
    - virtualenv -p $py3_bin $py3_venv_name
    - cd $py3_venv_name/bin
    - py3_venv_bin=$(pwd)

    # print Python version to CI output
    - $py3_venv_bin/python --version

    # Install requirements for tests
    - cd $imagesplit_dir
    - $py3_venv_bin/pip install -r requirements-dev.txt

    # Run tests with coverage
    - $py3_venv_bin/coverage run -a --source ./imagesplit -m unittest discover -s "tests"
    - $py3_venv_bin/coverage report -m

    ###############end of python3


    #### python 2 tests ###################################
    - echo 'Running Python 2 tests'

    # create a virtual env for testing
    - py2_venv_name="imagesplit-test-py2"
    - py2_bin=$(which python2)
    - virtualenv -p $py2_bin $py2_venv_name
    - cd $py2_venv_name/bin
    - py2_venv_bin=$(pwd)

    # print Python version to CI output
    - $py2_venv_bin/python --version

    # Install requirements for tests
    - cd $imagesplit_dir
    - $py2_venv_bin/pip install -r requirements-dev.txt

    # Run tests
    - $py2_venv_bin/python -m unittest discover -s "tests"

    ###############end of python3

    - echo 'finished tests'
  tags:
    - gift-linux


testjob-mac:
  stage: dev_test
  script:
    # print system info
    - pwd

    # save current folder path just in case
    - export imagesplit_dir=$(pwd)

    #### python 3 tests ###################################
    - echo 'Running Python 3 tests'

    # create a virtual env for testing
    - py3_venv_name="imagesplit-test-py3"
    - py3_bin=$(which python3)
    - virtualenv -p $py3_bin $py3_venv_name
    - cd $py3_venv_name/bin
    - py3_venv_bin=$(pwd)

    # print Python version to CI output
    - $py3_venv_bin/python --version

    # Install requirements for tests
    - cd $imagesplit_dir
    - $py3_venv_bin/pip install -r requirements-dev.txt

    # Run tests
    - $py3_venv_bin/python -m unittest discover -s "tests"

    ###############end of python3


    #### python 2 tests ###################################
    - echo 'Running Python 2 tests'

    # create a virtual env for testing
    - py2_venv_name="imagesplit-test-py2"
    - py2_bin=$(which python2)
    - virtualenv -p $py2_bin $py2_venv_name
    - cd $py2_venv_name/bin
    - py2_venv_bin=$(pwd)

    # print Python version to CI output
    - $py2_venv_bin/python --version

    # Install requirements for tests
    - cd $imagesplit_dir
    - $py2_venv_bin/pip install -r requirements-dev.txt

    # Run tests
    - $py2_venv_bin/python -m unittest discover -s "tests"

    ###############end of python3

    - echo 'finished tests'
  tags:
    - gift-mac

testjob-win:
  stage: dev_test
  script:

    # print system info
    - echo %CD%

    # PYTHON 3 Print Python version
    - py -3 --version

    # create a virtual env for testing
    - set py3_venv_name=imagesplit-test-py3

    # Create virtual environment if it does not exist
    - IF NOT EXIST %py3_venv_name%\Scripts\python.exe (
    - py -3 -m virtualenv %py3_venv_name%
    - if %errorlevel% neq 0 exit /b %errorlevel%
    - )

    # Install requirements for tests
    - .\%py3_venv_name%\Scripts\pip install -r requirements-dev.txt
    - if %errorlevel% neq 0 exit /b %errorlevel%

    # Run tests
    - .\%py3_venv_name%\Scripts\python -m unittest discover -s "tests"
    - if %errorlevel% neq 0 exit /b %errorlevel%

    # PYTHON 2 Print Python version
    - py -2 --version

    # create a virtual env for testing
    - set py2_venv_name=imagesplit-test-py2

    # Create virtual environment if it does not exist
    - IF NOT EXIST %py2_venv_name%\Scripts\python2 (
    - py -2.7 -m virtualenv %py2_venv_name%
    - if %errorlevel% neq 0 exit /b %errorlevel%
    - )

    # Install requirements for tests
    - .\%py2_venv_name%\Scripts\pip install -r requirements-dev.txt
    - if %errorlevel% neq 0 exit /b %errorlevel%

    # Run tests
    - .\%py2_venv_name%\Scripts\python -m unittest discover -s "tests"
    - if %errorlevel% neq 0 exit /b %errorlevel%

  tags:
    - gift-win

